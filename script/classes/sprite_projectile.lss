class sprite_projectile {
    property handle;
    property id;
    property name;
    property path;
    property speed;
    property spritesize;
    property lifespan;
    property detonateradius;
    
    method sprite_projectile(spriteID, objectOrTextureName, filePath, speed, spriteSize, lifespan, numberOfFrames, type) {
        this.id = scslosifoundation::stringtoidentifier(spriteID);
        this.name = spriteID;
        this.path = filePath;
        this.handle = null;
        if (speed == null) {
            this.speed = 50;
        }
        else {
            this.speed = speed;
        }
        if (spriteSize == null) {
            this.spritesize = 2;
        }
        else {
            this.spritesize = spriteSize;
        }
        if (lifespan == null) {
            this.lifespan = 3;
        }
        else {
            this.lifespan = lifespan;
        }
        //Type determines if the projectile is a texture (0) or a physical object (1).  Mismatching the type WILL crash
        if (type == null) {
            type = 0;
        }
        this.detonateradius = this.spritesize;
        this.handle = gcvectorprojectile::create(this.id, this.path, objectOrTextureName, this.speed, this.spritesize, this.lifespan, this.detonateradius, numberOfFrames, type);
        if (this.handle == null) {
            debug::print(("ERROR --- handle of Sprite_Projectile " + this.name) + " is nothing.");
        }
        return null;
    }
    
    method process(param1) {
        return null;
    }
    
    method cleanupfull() {
        if (this.hasdied() == 0) {
            this.detonate();
        }
        this.handle = null;
        this.id = null;
        this.name = null;
        this.path = null;
        this.speed = null;
        this.spritesize = null;
        this.lifespan = null;
        this.detonateradius = null;
        return null;
    }
    
    method launch(param1, param2) {
        if (this.handle == null) {
            debug::print("*** handle is nothing");
        }
        gcvectorprojectile::launch(this.handle, param2.x, param2.y, param2.z, param1.x, param1.y, param1.z);
        return null;
    }
    
    //Returns whether the projectile is still active or not
    method hasdied() {
        return gcvectorprojectile::hasdied(this.handle);
    }
    
    //Detonates the projectile
    method detonate() {
        gcvectorprojectile::detonate(this.handle);
        return null;
    }
    
    method onevent(param1) {
        return null;
    }
}