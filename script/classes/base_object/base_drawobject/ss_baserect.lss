class ss_baserect : base_drawobject {
    property rect;
    property rident;
    property mycolor;
    
    method ss_baserect(leftSide, topSide, rightSide, bottomSide, z_depth, set_rgba) {
        if (leftSide != null) {
            this.x1 = leftSide;
        }
        else {
            this.x1 = 0;
        }
        if (topSide != null) {
            this.y1 = topSide;
        }
        else {
            this.y1 = 0;
        }
        if (rightSide != null) {
            this.x2 = rightSide;
        }
        else {
            this.x2 = 0;
        }
        if (bottomSide != null) {
            this.y2 = bottomSide;
        }
        else {
            this.y2 = 0;
        }
        if (z_depth != null) {
            this.z = z_depth;
        }
        else {
            this.z = 0;
        }
        if (set_rgba != null) {
            this.mycolor = set_rgba;
        }
        else {
            this.mycolor = rgba(255, 255, 255, 255);
        }
        return null;
    }
    
    method initfull() {
        this.rect = gcrectangle::create();
        gcrectangle::setposition(this.rect, this.x1, this.y1, this.x2, this.y2);
        gcrectangle::setcolor(this.rect, this.mycolor);
        gcrectangle::setzdepth(this.rect, this.z);
        return null;
    }
    
    method cleanupfull() {
        this.rect = null;
        return null;
    }
    
    method initshort() {
        this.initfull();
        return null;
    }
    
    method cleanupshort() {
        this.cleanupfull();
        return null;
    }
    
    method add() {
        this.rident = gchuddirector::addrectangle(this.rect);
        return null;
    }
    
    method show() {
        gchuddirector::show(this.rident);
        this.onscreen = 1;
        return null;
    }
    
    method hide() {
        gchuddirector::hide(this.rident);
        this.onscreen = 0;
        return null;
    }
    
    method remove() {
        gchuddirector::remove(this.rident);
        return null;
    }
    
    method setpos(leftSide, topSide, rightSide, bottomSide) {
        if (this.x1 != null) {
            this.x1 = leftSide;
        }
        if (this.y1 != null) {
            this.y1 = topSide;
        }
        if (this.x2 != null) {
            this.x2 = rightSide;
        }
        if (this.y2 != null) {
            this.y2 = bottomSide;
        }
        gcrectangle::setposition(this.rect, this.x1, this.y1, this.x2, this.y2);
        return null;
    }
    
    method setzvalue(z_depth) {
        if (z_depth != null) {
            this.z = z_depth;
        }
        gcrectangle::setzdepth(this.rect, this.z);
        return null;
    }
    
    method changepos(x_change, y_change) {
        if (x_change != null) {
            this.x1 = this.x1 + x_change;
        }
        if (y_change != null) {
            this.y1 = this.y1 + y_change;
        }
        if (x_change != null) {
            this.x2 = this.x2 + x_change;
        }
        if (y_change != null) {
            this.y2 = this.y2 + y_change;
        }
        gcrectangle::setposition(this.rect, this.x1, this.y1, this.x2, this.y2);
        return null;
    }
    
    method setcolor(red, green, blue, alpha) {
        if (red != null) {
            this.mycolor = this.mycolor.__withred(red);
        }
        if (green != null) {
            this.mycolor = this.mycolor.__withgreen(green);
        }
        if (blue != null) {
            this.mycolor = this.mycolor.__withblue(blue);
        }
        if (alpha != null) {
            this.mycolor = this.mycolor.__withalpha(alpha);
        }
        gcrectangle::setcolor(this.rect, this.mycolor);
        return null;
    }
    
    method changecolor(red_change, green_change, blue_change, alpha_change) {
        if (red_change != null) {
            this.mycolor = this.mycolor.__withred(this.mycolor.__red + red_change);
        }
        if (green_change != null) {
            this.mycolor = this.mycolor.__withgreen(this.mycolor.__green + green_change);
        }
        if (blue_change != null) {
            this.mycolor = this.mycolor.__withblue(this.mycolor.__blue + blue_change);
        }
        if (alpha_change != null) {
            this.mycolor = this.mycolor.__withalpha(this.mycolor.__alpha + alpha_change);
        }
        gcrectangle::setcolor(this.rect, this.mycolor);
        return null;
    }
}