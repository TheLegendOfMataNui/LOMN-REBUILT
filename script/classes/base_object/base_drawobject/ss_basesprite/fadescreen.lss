class fadescreen : ss_basesprite {
    property faderectangle;
    property faderate;
    property fadetimeleft;
    property incrementor;
    property decrementor;
    property blnshow;
    property blnhide;
    
    method fadescreen() {
        return null;
    }
    
    method initfull() {
        this.faderectangle = new ss_gradrect(0, 0, screenx, screeny, 0, rgba(0, 0, 0, 255), rgba(0, 0, 0, 255), rgba(0, 0, 0, 255), rgba(0, 0, 0, 255));
        this.faderectangle.initfull();
        this.faderectangle.add();
        this.initshort();
        return null;
    }
    
    method initshort() {
        this.incrementor = 0;
        this.decrementor = 255;
        this.blnshow = 0;
        return null;
    }
    
    method getfadetime() {
        if (this.fadetimeleft == null) {
            return 0;
        }
        else {
            return this.fadetimeleft;
        }
        return null;
    }
    
    method input(param1) {
        return null;
    }
    
    method cleanupfull() {
        if (this.faderectangle != null) {
            this.faderectangle.hide();
            this.faderectangle.remove();
            this.faderectangle.cleanupfull();
            this.faderectangle = null;
        }
        this.faderate = null;
        this.fadetimeleft = null;
        this.incrementor = null;
        this.decrementor = null;
        this.blnshow = null;
        this.blnhide = null;
        return null;
    }
    
    method cleanupshort() {
        return null;
    }
    
    method process(param1) {
        if (this.blnshow) {
            this.fadetimeleft = this.fadetimeleft - param1.deltatime;
            if (this.fadetimeleft <= 0) {
                this.fadetimeleft = 0;
            }
            this.setincrementvalue();
        }
        if (this.blnhide) {
            this.fadetimeleft = this.fadetimeleft - param1.deltatime;
            if (this.fadetimeleft <= 0) {
                this.fadetimeleft = 0;
            }
            this.setdecrementvalue();
        }
        return null;
    }
    
    method setincrementvalue() {
        if (this.faderate > 0) {
            this.incrementor = __toint(255 - (255 * (this.fadetimeleft / this.faderate)));
            debug::print(this.incrementor);
        }
        else {
            this.incrementor = 255;
            globalclass.hud.hide();
        }
        this.faderectangle.changegrad(0, rgba(0, 0, 0, this.incrementor));
        this.faderectangle.changegrad(1, rgba(0, 0, 0, this.incrementor));
        this.faderectangle.changegrad(2, rgba(0, 0, 0, this.incrementor));
        this.faderectangle.changegrad(3, rgba(0, 0, 0, this.incrementor));
        if (this.incrementor == 255) {
            this.incrementor = 0;
            this.blnshow = 0;
            //Create OSI event 1005, FADESCREEN_COMPLETE
            //Arg: 0 
            //1 = Fadeout to black finished, 0 = Fadein from black finished
            //Define above conditional as a value of 1 for argument 0
            var var1 = new scriptevent(1005, [ 1 ]);
            var1.send();
        }
        return null;
    }
    
    method setdecrementvalue() {
        if (this.faderate > 0) {
            this.decrementor = __toint(255 * (this.fadetimeleft / this.faderate));
            debug::print(this.decrementor);
        }
        else {
            this.decrementor = 0;
        }
        this.faderectangle.changegrad(0, rgba(0, 0, 0, this.decrementor));
        this.faderectangle.changegrad(1, rgba(0, 0, 0, this.decrementor));
        this.faderectangle.changegrad(2, rgba(0, 0, 0, this.decrementor));
        this.faderectangle.changegrad(3, rgba(0, 0, 0, this.decrementor));
        if (this.decrementor == 0) {
            this.blnhide = 0;
            //globalclass.hud.show();
            //OSI event 1005, FADESCREEN_COMPLETE 
            //Arg: 0
            //1 = Fadeout to black finished, 0 = Fadein from black finished
            //Define above conditional as a value of 0 for argument 0
            var var1 = new scriptevent(1005, [ 0 ]);
            var1.send();
        }
        return null;
    }
    
    method setfaderate(param1) {
        this.faderate = param1;
        return null;
    }
    
    method show(fadeOutRate) {
        this.faderectangle.show();
        this.blnshow = 1;
        this.blnhide = 0;
        if (fadeOutRate == null) {
            //If no argument passed, set this to a default of 1.0
            this.faderate = 1.0;
        }
        else {
            this.faderate = fadeOutRate;
        }
        this.fadetimeleft = this.faderate;
        return null;
    }
    
    method hide(fadeInRate) {
        this.decrementor = 255;
        this.faderectangle.show();
        this.blnhide = 1;
        this.blnshow = 0;
        if (fadeInRate == null) {
            //If no argument passed, set this to a default of 1.0
            this.faderate = 1.0;
        }
        else {
            this.faderate = fadeInRate;
        }
        this.fadetimeleft = this.faderate;
        return null;
    }
}